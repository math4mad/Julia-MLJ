{
  "hash": "b54d7f595ebb538207a1642f7e972252",
  "result": {
    "markdown": "---\ntitle: \"3-cricket-chirp-rate\"\ncode-fold: true\n---\n\n:::{.callout-note title=\"简介\"}\n - [source1](http://www.probability.ca/jeff/teaching/1617/sta130/lecturenotes/notesCposthand.pdf)\n\n- [source2](https://rdrr.io/rforge/Lock5Data/man/CricketChirps.html#heading-3)\n- [sourc3](https://www.britannica.com/animal/snowy-tree-cricket)\n  \n>雪树蟋蟀的鸣叫实际是大腿摩擦发出的声音, 经过数据收集,发现鸣叫的频率和环境温度正相关.\n\n经过线性拟合得到的函数为:`C(t)=4.25t-157.8`\n\n:::\n\n\n## 1. load pacakge\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nimport FileIO:load\nimport MLJ:fit!,match,predict,table,fitted_params\nusing GLMakie, CSV,DataFrames,MLJ,FileIO\nimg=load(\"./data/snowy-cricket.jpg\");\n```\n:::\n\n\n## 2. process data\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\ndf=CSV.File(\"./data/CricketChirps.csv\") |> DataFrame |> dropmissing;\nX=MLJ.table(reshape(df[:,1],7,1))\ny=Vector(df[:,2])\n\ntest_X=range(extrema(df[:,1])...,50)\ntest_X=MLJ.table(reshape(test_X,50,1))\ncols=names(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n2-element Vector{String}:\n \"Temperature\"\n \"Chirps\"\n```\n:::\n:::\n\n\n## 3. MLJ  workflow\n### 3.1 fitting model\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n    LinearRegressor = @load LinearRegressor pkg=MLJLinearModels\n    mach = fit!(machine(LinearRegressor(), X, y))\n    report(mach)\n\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: For silent loading, specify `verbosity=0`. \n┌ Warning: The number and/or types of data arguments do not match what the specified model\n│ supports. Suppress this type check by specifying `scitype_check_level=0`.\n│ \n│ Run `@doc MLJLinearModels.LinearRegressor` to learn more about your model's requirements.\n│ \n│ Commonly, but non exclusively, supervised models are constructed using the syntax\n│ `machine(model, X, y)` or `machine(model, X, y, w)` while most other models are\n│ constructed with `machine(model, X)`.  Here `X` are features, `y` a target, and `w`\n│ sample or class weights.\n│ \n│ In general, data in `machine(model, data...)` is expected to satisfy\n│ \n│     scitype(data) <: MLJ.fit_data_scitype(model)\n│ \n│ In the present case:\n│ \n│ scitype(data) = Tuple{Table{AbstractVector{Continuous}}, AbstractVector{Count}}\n│ \n│ fit_data_scitype(model) = Tuple{Table{<:AbstractVector{<:Continuous}}, AbstractVector{Continuous}}\n└ @ MLJBase ~/.julia/packages/MLJBase/fEiP2/src/machines.jl:230\n[ Info: Training machine(LinearRegressor(fit_intercept = true, …), …).\n┌ Info: Solver: MLJLinearModels.Analytical\n│   iterative: Bool false\n└   max_inner: Int64 200\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nimport MLJLinearModels ✔\n```\n:::\n:::\n\n\n### 3.2 plot fitting curve\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nyhat=predict(mach,test_X).|>(d->round(d,digits=2))\nfunction plot_fitting_curve(df,yhat)\n    X=df[:,1]\n    test_X=range(extrema(df[:,1])...,50)\n    cols=names(df)\n    fig=Figure()\n    ax=Axis(fig[1:3,1:3];xlabel=\"$(cols[1])\",ylabel=\"$(cols[2])\",title=\"cricket-chirp\")\n    ax2 = Axis(fig[2,4],title=\"snowy-tree-cricket\")\n    scatter!(ax, X,y,markersize=16,color=(:red,0.8))\n    lines!(ax, test_X,yhat,color=:blue)\n    image!(ax2,img)\n    hidespines!(ax2)\n    hidedecorations!(ax2)\n    fig\nend\nplot_fitting_curve(df,yhat)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](3-cricket-chirp-rate_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "3-cricket-chirp-rate_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}