{
  "hash": "5a81a1548ffcbd81436b41ff2886aa6b",
  "result": {
    "markdown": "---\ntitle: \"9-poisson-reg\"\nauthor: math4mad\ncode-fold: true\n---\n\n:::{.callout-note title=\"简介\"}\n   泊松回归(Poisson Regression) 是一类特殊的回归模型,相应变量是计数数据(离散正整数)\n   响应变量的分布遵循泊松分布\n\n   dataset [data](https://www.kaggle.com/code/gauravduttakiit/explore-the-poisson-regression/input)\n\n   数据集有两个变量, 预测变量为数学成绩(Math Score),响应变量为奖学金等级(0-6)\n\n:::\n\n\n## 1. load package\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n    include(\"../utils.jl\")\n    import MLJ:fit!,fitted_params,coerce\n    using GLMakie,MLJ,CSV,DataFrames,ScientificTypes\n```\n:::\n\n\n## 2. load data\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nto_ScienceType(d)=coerce(d,:Awards=> Multiclass,:MathScore=>Continuous)\ndf=CSV.File(\"./data/competition_awards_data.csv\") |> DataFrame|>dropmissing\n \n X=MLJ.table(reshape(df[:,2],200,1))\n y=Vector(df[:,1])\n (Xtrain, Xtest), (ytrain, ytest) = partition((X, y), 0.8, rng=123, multi=true)\n first(df,10)\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```{=html}\n<div><div style = \"float: left;\"><span>10×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Awards</th><th style = \"text-align: left;\">MathScore</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">43</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">38</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">41</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">33</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">39</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">43</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">35</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">41</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">36</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">38</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## 3. MLJ Workflow\n\n### 3.1 load model\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n    CountRegressor = @load LinearCountRegressor pkg=GLM\n    model = CountRegressor(fit_intercept=false)\n    mach = machine(model, Xtrain, ytrain)\n    fit!(mach)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nimport MLJGLMInterface ✔\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: For silent loading, specify `verbosity=0`. \n┌ Warning: The number and/or types of data arguments do not match what the specified model\n│ supports. Suppress this type check by specifying `scitype_check_level=0`.\n│ \n│ Run `@doc GLM.LinearCountRegressor` to learn more about your model's requirements.\n│ \n│ Commonly, but non exclusively, supervised models are constructed using the syntax\n│ `machine(model, X, y)` or `machine(model, X, y, w)` while most other models are\n│ constructed with `machine(model, X)`.  Here `X` are features, `y` a target, and `w`\n│ sample or class weights.\n│ \n│ In general, data in `machine(model, data...)` is expected to satisfy\n│ \n│     scitype(data) <: MLJ.fit_data_scitype(model)\n│ \n│ In the present case:\n│ \n│ scitype(data) = Tuple{Table{AbstractVector{Count}}, AbstractVector{Count}}\n│ \n│ fit_data_scitype(model) = Union{Tuple{Table{<:AbstractVector{<:Continuous}}, AbstractVector{Count}}, Tuple{Table{<:AbstractVector{<:Continuous}}, AbstractVector{Count}, AbstractVector{<:Union{Continuous, Count}}}}\n└ @ MLJBase ~/.julia/packages/MLJBase/fEiP2/src/machines.jl:230\n[ Info: Training machine(LinearCountRegressor(fit_intercept = false, …), …).\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=85}\n```\ntrained Machine; caches model-specific representations of data\n  model: LinearCountRegressor(fit_intercept = false, …)\n  args: \n    1:\tSource @955 ⏎ Table{AbstractVector{Count}}\n    2:\tSource @555 ⏎ AbstractVector{Count}\n```\n:::\n:::\n\n\n### 3.2 predict model results\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n yhat=predict_mode(mach, Xtest)|>Array\n @info \"rms\"=>rms(yhat,ytest)\n\n report(mach)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: \"rms\" => 0.9486832980505138\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\n(stderror = [0.0013746169531615926],\n dof_residual = 160.0,\n vcov = [1.88957176791926e-6;;],\n deviance = 254.53389416397937,\n coef_table = ───────────────────────────────────────────────────────────────────\n         Coef.  Std. Error     z  Pr(>|z|)    Lower 95%   Upper 95%\n───────────────────────────────────────────────────────────────────\nx1  0.00104856  0.00137462  0.76    0.4456  -0.00164564  0.00374276\n───────────────────────────────────────────────────────────────────,)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "9-poisson-reg_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}