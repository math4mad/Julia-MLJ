{
  "hash": "3e4b2757b8c3970db2697819085bda46",
  "result": {
    "markdown": "---\ntitle: \"6-compare of BetalML models\"\ncode-fold: true\n---\n\n:::{.callout-note,title=\"简介\"}\n使用 `BetaMLjl` 库 on  `german-creditcard` dataset  \n\n- ref :[german-creditcard](https://online.stat.psu.edu/stat857/node/215/)\n- 类型转换:`coerce(d,autotype(d, (:few_to_finite, :discrete_to_continuous)))`\n- `BetaML`是`julia`中另一个大型的机器学习库,参考文档:[`BetaML Doc`](https://sylvaticus.github.io/BetaML.jl/stable/)\n:::\n\n## 1. load package\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\ninclude(\"../utils.jl\")\nimport MLJ:predict,predict_mode\nimport BetaML\nusing DataFrames,MLJ,CSV,MLJModelInterface,GLMakie\nusing CatBoost.MLJCatBoostInterface\n```\n:::\n\n\n## 2. load data\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n   Xtrain, Xtest, ytrain, ytest,cat= load_german_creditcard();\n```\n:::\n\n\n## 3. define models\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction define_models()\n\n        modelType1= @load NeuralNetworkClassifier pkg = \"BetaML\"\n\n        layers= [BetaML.DenseLayer(19,8,f=BetaML.relu),BetaML.DenseLayer(8,8,f=BetaML.relu),BetaML.DenseLayer(8,2,f=BetaML.relu),BetaML.VectorFunctionLayer(2,f=BetaML.softmax)];\n        nn_model= modelType1(layers=layers,opt_alg=BetaML.ADAM())\n\n        modelType2= @load DecisionTreeClassifier pkg = \"BetaML\" verbosity=0\n        dt_model= modelType2()\n\n        modelType3= @load KernelPerceptron pkg = \"BetaML\"\n        kp_model= modelType3()\n\n\n        modelType4= @load LinearPerceptron pkg = \"BetaML\"\n        lp_model= modelType4()\n\n        modelType5= @load Pegasos pkg = \"BetaML\" verbosity=0\n        peg_model=modelType5()\n\n\n        modelType6= @load RandomForestClassifier pkg = \"BetaML\" verbosity=0\n        rf_model=modelType6()\n\n        \n        cat_model=CatBoostClassifier(iterations=5)\n\n        models=[nn_model,dt_model,kp_model,lp_model,peg_model,rf_model,cat_model]\n        models_name=[\"nn\",\"dt\",\"kp\",\"lp\",\"peg\",\"rf\",\"cat\"]\n        return models,models_name\n    end\n\n    models,models_name=define_models()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nimport BetaML ✔\nimport BetaML ✔\nimport BetaML ✔\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: For silent loading, specify `verbosity=0`. \n[ Info: For silent loading, specify `verbosity=0`. \n[ Info: For silent loading, specify `verbosity=0`. \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n(Probabilistic[NeuralNetworkClassifier(layers = BetaML.Nn.AbstractLayer[BetaML.Nn.DenseLayer([0.05820738438709466 0.15359974309514773 -0.2831571785409146 0.16676850370879254 0.04929165267757313 -0.38285625364631787 0.15943637609587863 -0.27963202262072295 0.4132068837304728 0.23994588656424914 0.3331154888122921 -0.14479877282526987 0.45349354202038267 -0.36374167213500097 0.38082093079144613 0.37683827444194523 -0.46572298136617724 -0.23696388317085407 -0.08100593088111102; 0.06901683915827367 0.10885118809668531 -0.4562971657881886 0.14338110290778844 -0.11795018859442519 0.28052259638617466 -0.39114674196409016 -0.04831482621792332 0.35273693227920394 0.10480838584360691 -0.3882485252335783 -0.4056213461754389 0.017690421658710653 -0.1955787553364121 0.34792091768031325 0.09347562692019068 0.009391921693455096 -0.212095472683146 -0.20048430029910436; -0.06941467294954756 0.16129590429684365 -0.3945640354462488 0.15750470788914933 0.3885122964456477 0.3332096512447256 0.09856154384626498 -0.05614878195860046 0.33348964914921825 0.3707940793066557 -0.4479100528048172 -0.46347117014718187 -0.007039753144278238 -0.011376074492971178 -0.07072402501612518 0.08988149206751922 -0.19302224723166356 0.07734011936937807 -0.2438275089701145; 0.30256089311740614 -0.09932629957089412 -0.0077149806013037114 0.2654651769987186 0.3982010752255802 0.1289689169965758 0.297683799044506 -0.3235707608961984 -0.13947296518093505 -0.3866613481102852 0.4612340110485032 0.09589044406863684 -0.34681211749141494 0.3912379724306973 -0.274696646744903 -0.396760579894517 -0.20437013714880814 0.3495768800225088 0.28755435414271086; 0.0919437046719424 0.16931759505456506 -0.16060918296751214 0.08009622213393358 -0.3610249335742296 -0.3636441188511364 -0.0747093794790551 0.02281957204525198 0.271534490785404 -0.010953880667109894 -0.46554915248123163 -0.013605598378954087 -0.26005124669666824 -0.35861740319732727 0.30156562967838657 -0.14506943028251668 0.37773622090065445 0.0043235812838134935 -0.28832307709763183; -0.3806236147103368 -0.41421792839709537 -0.05618041769254023 0.16700437692063458 0.27102999676282086 0.35732365366629854 -0.05554105450928831 -0.2940072650901307 -0.34858976308809075 -0.08781933261412772 0.07928849524951381 -0.2921509924901116 0.18309806737871553 -0.11845842252775374 -0.06605444214841183 -0.0754080395983614 0.02466617817400185 -0.02664319143567151 0.15425330169287638; 0.13965560253588044 -0.09589353646704613 0.20626211811746914 -0.02921942808900324 0.3573230040979693 0.42935726597655327 -0.23408604902535424 -0.4215264566882938 0.4272593128320675 -0.16466109292776998 -0.33591805893963517 -0.036667714700584164 -0.34113360310055485 -0.3182231815230606 -0.11030028776196782 0.3256404048487927 0.14568923379312165 -0.019597433857755753 0.077261277931228; 0.38597940043614193 0.4319364470182649 -0.28449397939645227 0.07973192193347306 0.2694921479971733 -0.18858938084715898 -0.40054720769577173 -0.35243943303754405 0.2698207629784914 -0.04530609440807121 0.19307566106689628 -0.42992875049556945 -0.4287847726205011 -0.27969985088909566 -0.31641882142491573 -0.12743914848036442 0.31095121929552044 -0.456382107919568 -0.1648328690974179], [-0.2666745908870727, 0.13335549524629603, 0.4625666178783718, 0.3847289564398341, 0.09889588201385607, 0.2458351640238045, 0.2109170440803862, 0.27406286915212036], BetaML.Utils.relu, BetaML.Utils.drelu), BetaML.Nn.DenseLayer([0.005075366742773646 -0.48097438646814705 0.24202419659313423 0.6039221547858566 -0.11976624202124153 -0.26134915538668896 -0.1520800429322422 -0.6079732437148756; -0.15902388506436266 0.4101717997035834 -0.5271613841794951 0.2690671662689458 -0.4230502037386945 0.11813231578901096 0.09325917845478093 0.4018585055010937; -0.2865075182395346 0.43471923470729346 0.2682249356075499 -0.5804239225619936 -0.017040839642027406 -0.3158258548173093 -0.477498223140287 0.13153104269917792; -0.5603066570243207 0.5952577897306224 0.4279333630418678 -0.35588446441781557 0.01209911108282935 -0.29111475402071807 -0.0174045265860725 0.04347310148045058; 0.5361749410563643 -0.3710729959358052 0.3529941097864132 -0.6063062419946463 -0.34004410443094263 0.4490957104375721 0.5123489900427278 0.4783393295378502; -0.11215598338594046 -0.28622835800662383 -0.5851596590693836 0.3360290209415717 -0.4882731373846543 0.3718133861167885 0.40579943105041694 -0.2718409279216593; -0.49954399310383746 0.3947207073626293 -0.5158613400091111 0.49616248887375614 0.20709696475507455 0.021484345248235504 -0.06475831562880818 -0.30896275033352183; -0.05886588471216203 0.2781006271207779 -0.3955067757966984 -0.49202779529733237 -0.49270737466597236 -0.5144344557540311 -0.5739435312843488 -0.005598791115059343], [0.12486624424729331, 0.017621262906071578, -0.5119634127517022, -0.43616584920553747, -0.5048865910191135, 0.020664280050312178, 0.5074801901222517, 0.36057442264095185], BetaML.Utils.relu, BetaML.Utils.drelu), BetaML.Nn.DenseLayer([-0.3362431477665603 0.5672463100472439 0.6291035495812666 0.3352432455473987 0.113728772083315 0.3165847703233825 0.403355366417247 -0.4407581299244073; -0.0742656560025654 -0.5025245602904989 0.6085454291677123 0.30955389410722545 0.40102639527542594 -0.3606842071176862 0.5068886580090403 -0.6273414555421792], [0.0529497761563511, -0.5677199029810545], BetaML.Utils.relu, BetaML.Utils.drelu), BetaML.Nn.VectorFunctionLayer{0}(fill(NaN), 2, 2, BetaML.Utils.softmax, BetaML.Utils.dsoftmax, nothing)], …), DecisionTreeClassifier(max_depth = 0, …), KernelPerceptron(kernel = radial_kernel, …), LinearPerceptron(initial_coefficients = nothing, …), Pegasos(initial_coefficients = nothing, …), RandomForestClassifier(n_trees = 30, …), CatBoostClassifier(iterations = 5, …)], [\"nn\", \"dt\", \"kp\", \"lp\", \"peg\", \"rf\", \"cat\"])\n```\n:::\n:::\n\n\n## 4. train model\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nfunction train_model()\n    for (idx,model) in enumerate(models[1:6])\n        local (fitResults, cache, report) = MLJ.fit(model, 0, Xtrain,ytrain);\n        local est_classes= predict_mode(model, fitResults, Xtest)\n        local acc=accuracy(ytest,est_classes)|>d->round(d, digits=3)\n        @info \"$(models_name[idx])===>$(acc)\"\n    end\nend\n\ntrain_model()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: nn===>0.695\n[ Info: dt===>0.705\n[ Info: kp===>0.325\n[ Info: lp===>0.695\n[ Info: peg===>0.695\n[ Info: rf===>0.735\n```\n:::\n:::\n\n\n",
    "supporting": [
      "6-compare of BetalML method_files"
    ],
    "filters": [],
    "includes": {}
  }
}