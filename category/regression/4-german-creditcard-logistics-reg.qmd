---
title : "4-german-creditcard-logistics-reg"
code-fold: true
---

:::{.callout-note,title="简介"}
 - ref :[german-creditcard](https://online.stat.psu.edu/stat857/node/215/)
 - scitype 转换 参考:[autotype(d, :few_to_finite)方法](https://juliaai.github.io/DataScienceTutorials.jl/data/processing/)
  
:::

## 1. load package
```{julia}
include("../utils.jl")
import MLJ:predict,fit!,predict_mode,range
using DataFrames,MLJ,CSV,MLJModelInterface,GLMakie
```


## 2. data procsssing
```{julia}
to_ScienceType(d)=coerce(d,autotype(d, :few_to_finite))
df=load_csv("german_creditcard")|>to_ScienceType
first(df,5)|>display
y, X=  unpack(df, ==(:Creditability));
cat=levels(y)
X=X[:,1:end-1]  # 去除最后一列变量
(Xtrain, Xtest), (ytrain, ytest) = partition((X, y), 0.8, rng=123, multi=true);
```

## 3. MLJ workflow
### 3.1 define model
```{julia}
LogisticClassifier = @load LogisticClassifier pkg=MLJLinearModels
model=LogisticClassifier()
NuSVC = @load NuSVC pkg=LIBSVM
model2 = NuSVC()
KNNClassifier = @load KNNClassifier pkg=NearestNeighborModels
model3 = KNNClassifier(weights = NearestNeighborModels.Inverse())

"定义 几个 tune 参数的区间 "
k1 =range(model, :gamma, lower=0.1, upper=1.2);
k2 =range(model, :lambda, lower=0.1, upper=1.2);
k3 =range(model, :penalty, values=([:l2, :l1,:en,:none]));
k4 =range(model, :fit_intercept, values=([true, false]));

tuning_logistic = TunedModel(model=model,
							 resampling = CV(nfolds=4, rng=1234),
							 tuning = Grid(resolution=8),
							 range = [k1,k2],
							 measure=accuracy)
mach = machine(tuning_logistic, Xtrain, ytrain;scitype_check_level=0)|>fit!
```

### 3.2 predict test results
```{julia}
yhat=predict_mode(mach, Xtest)|>Array
@info "german-creditcard 违约预测准确率"=>accuracy(ytest,yhat)|>d->round(d,digits=3)
```




